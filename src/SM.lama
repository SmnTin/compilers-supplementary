-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c @ [s, st, w], insns) {
  -- case insns of
  --   {} -> printf("Instrs done.\n")
  --   | i : _ -> printf("Instr: %s \n", showSMInsn(i))
  -- esac;
  case insns of
    {} -> c
  | READ : insns -> 
      case readWorld(w) of
        [v, nw] -> eval([v : s, st, nw], insns)
      esac
  | WRITE : insns ->
      case s of
        z : s -> eval([s, st, writeWorld(z, w)], insns)
      esac
  | BINOP (op) : insns ->
      case s of
        b : a : s -> eval([evalBinop (op, a, b) : s, st, w], insns)
      esac
  | LD (x) : insns -> eval([st (x) : s, st, w], insns)
  | ST (x) : insns ->
      case s of
        z : s -> eval([s, st <- [x, z], w], insns)
      esac
  | CONST (n) : insns -> eval([n : s, st, w], insns)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x)            -> {LD (x)}
  | Const (n)          -> {CONST (n)}
  | Binop (op, e1, e2) -> compileExpr (e1) +++ compileExpr (e2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (x, e) -> compileExpr (e) +++ {ST (x)}
  | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Skip -> {}
  | Read (x) -> {READ, ST (x)}
  | Write (e) -> compileExpr (e) +++ {WRITE}
  esac
}
